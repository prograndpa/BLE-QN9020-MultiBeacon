<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\broadcaster.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\broadcaster.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Mon Oct 17 11:39:48 2016
<BR><P>
<H3>Maximum Stack Usage =        648 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; plf_init &rArr; nvds_restore_backup &rArr; nvds_copy &rArr; sector_erase_flash_patch
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[b]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">ACMP0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">ACMP0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">ACMP1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[11]">ADC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">BLE_IRQHandler</a> from lib.o(i.BLE_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">CALIB_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">GPIO_IRQHandler</a> from gpio.o(i.GPIO_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">I2C_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">OSC_EN_IRQHandler</a> from sleep.o(i.OSC_EN_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1f]">PWM0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">PWM1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">RTC_CAP_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">SPI0_IRQHandler</a> from startup.o(.text) referenced 2 times from startup.o(RESET)
 <LI><a href="#[18]">SPI1_IRQHandler</a> from startup.o(.text) referenced 2 times from startup.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">TIMER0_IRQHandler</a> from timer.o(i.TIMER0_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1b]">TIMER1_IRQHandler</a> from timer.o(i.TIMER1_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1c]">TIMER2_IRQHandler</a> from timer.o(i.TIMER2_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1d]">TIMER3_IRQHandler</a> from timer.o(i.TIMER3_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[22]">TUNER_RX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">TUNER_SETTING_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">TUNER_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">UART0_RX_IRQHandler</a> from uart.o(i.UART0_RX_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[13]">UART0_TX_IRQHandler</a> from uart.o(i.UART0_TX_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[17]">UART1_RX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">UART1_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">WDT_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(.text)
 <LI><a href="#[45]">app_32k_xtal_wakeup_timer</a> from app_task.o(i.app_32k_xtal_wakeup_timer) referenced from app_task.o(.constdata)
 <LI><a href="#[47]">app_beacon_chg_ctx_timer_handler</a> from usr_design.o(i.app_beacon_chg_ctx_timer_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[48]">app_button_timer_handler</a> from usr_design.o(i.app_button_timer_handler) referenced 2 times from app_task.o(.constdata)
 <LI><a href="#[42]">app_event_button1_press_handler</a> from usr_design.o(i.app_event_button1_press_handler) referenced from usr_design.o(i.usr_init)
 <LI><a href="#[43]">app_event_button2_press_handler</a> from usr_design.o(i.app_event_button2_press_handler) referenced from usr_design.o(i.usr_init)
 <LI><a href="#[4f]">app_gap_change_param_req_cmp_handler</a> from app_gap_task.o(i.app_gap_change_param_req_cmp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4c]">app_gap_read_bdaddr_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_read_bdaddr_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4b]">app_gap_read_ver_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_read_ver_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4d]">app_gap_ready_evt_handler</a> from app_gap_task.o(i.app_gap_ready_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[49]">app_gap_reset_req_cmp_handler</a> from app_gap_task.o(i.app_gap_reset_req_cmp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4e]">app_gap_set_devname_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_set_devname_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[50]">app_gap_set_mode_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_set_mode_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[51]">app_gap_set_random_add_req_cmp_handler</a> from app_gap_task.o(i.app_gap_set_random_add_req_cmp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4a]">app_gap_set_sec_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_set_sec_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[52]">app_gatt_resource_access_req_handler</a> from app_gap_task.o(i.app_gatt_resource_access_req_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[46]">app_led_timer_handler</a> from usr_design.o(i.app_led_timer_handler) referenced 2 times from app_task.o(.constdata)
 <LI><a href="#[3e]">atts_req_error_ind_handler_patch</a> from lib.o(i.atts_req_error_ind_handler_patch) referenced from lib.o(i.task_gatt_desc_register)
 <LI><a href="#[38]">default_enter_sleep_cb</a> from lib.o(i.default_enter_sleep_cb) referenced from lib.o(i.plf_init)
 <LI><a href="#[39]">default_exit_sleep_cb</a> from lib.o(i.default_exit_sleep_cb) referenced from lib.o(i.plf_init)
 <LI><a href="#[34]">force_agc_enable_null</a> from lib.o(i.force_agc_enable_null) referenced from lib.o(i.plf_init)
 <LI><a href="#[28]">fputc</a> from retarget.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[2c]">gap_discon_ind_handler_patch</a> from lib.o(i.gap_discon_ind_handler_patch) referenced from lib.o(i.ble_init)
 <LI><a href="#[3c]">gatt_read_char_req_handler_patch</a> from lib.o(i.gatt_read_char_req_handler_patch) referenced from lib.o(i.task_gatt_desc_register)
 <LI><a href="#[3d]">gatt_write_char_req_handler_patch</a> from lib.o(i.gatt_write_char_req_handler_patch) referenced from lib.o(i.task_gatt_desc_register)
 <LI><a href="#[27]">gpio_interrupt_callback</a> from usr_design.o(i.gpio_interrupt_callback) referenced from system.o(i.SystemInit)
 <LI><a href="#[3b]">l2cc_data_packet_ind_handler_patch</a> from lib.o(i.l2cc_data_packet_ind_handler_patch) referenced from lib.o(i.task_atts_desc_register)
 <LI><a href="#[3f]">l2cc_data_send_rsp_handler_patch</a> from lib.o(i.l2cc_data_send_rsp_handler_patch) referenced from lib.o(i.task_gatt_desc_register)
 <LI><a href="#[2d]">llc_data_packet_ind_handler_patch</a> from lib.o(i.llc_data_packet_ind_handler_patch) referenced from lib.o(i.ble_init)
 <LI><a href="#[40]">llc_data_req_handler_patch</a> from lib.o(i.llc_data_req_handler_patch) referenced from lib.o(i.task_llc_desc_register)
 <LI><a href="#[41]">llc_lld_stop_ind_handler_patch</a> from lib.o(i.llc_lld_stop_ind_handler_patch) referenced from lib.o(i.task_llc_desc_register)
 <LI><a href="#[37]">lld_sleep_init_patch</a> from lib.o(i.lld_sleep_init_patch) referenced from lib.o(i.plf_init)
 <LI><a href="#[35]">lld_sleep_lpcycles_2_us</a> from lib.o(i.lld_sleep_lpcycles_2_us) referenced from lib.o(i.plf_init)
 <LI><a href="#[29]">llm_lld_data_ind_handler_patch</a> from lib.o(i.llm_lld_data_ind_handler_patch) referenced from lib.o(i.ble_init)
 <LI><a href="#[25]">main</a> from app_main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[32]">nvds_erase</a> from lib.o(i.nvds_erase) referenced from lib.o(i.plf_init)
 <LI><a href="#[33]">nvds_read</a> from lib.o(i.nvds_read) referenced from lib.o(i.plf_init)
 <LI><a href="#[31]">nvds_write</a> from lib.o(i.nvds_write) referenced from lib.o(i.plf_init)
 <LI><a href="#[3a]">plf_reset_cb</a> from lib.o(i.plf_reset_cb) referenced from lib.o(i.plf_init)
 <LI><a href="#[2f]">prf_dispatch_disconnect</a> from usr_design.o(i.prf_dispatch_disconnect) referenced from app_main.o(i.main)
 <LI><a href="#[2e]">prf_init</a> from usr_design.o(i.prf_init) referenced from app_main.o(i.main)
 <LI><a href="#[36]">rwble_slot_2_lpcycles</a> from lib.o(i.rwble_slot_2_lpcycles) referenced from lib.o(i.plf_init)
 <LI><a href="#[30]">sleep_cb</a> from sleep.o(i.sleep_cb) referenced from app_main.o(i.main)
 <LI><a href="#[2b]">smp_rtx_ind_handler_patch</a> from lib.o(i.smp_rtx_ind_handler_patch) referenced from lib.o(i.ble_init)
 <LI><a href="#[2a]">smpc_l2cc_data_packet_ind_handler_patch</a> from lib.o(i.smpc_l2cc_data_packet_ind_handler_patch) referenced from lib.o(i.ble_init)
 <LI><a href="#[44]">usr_beacon_chg_ctx_process</a> from usr_design.o(i.usr_beacon_chg_ctx_process) referenced from usr_design.o(i.usr_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[53]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[55]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ca]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[cb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CALIB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_CAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TUNER_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TUNER_SETTING_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TUNER_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>__aeabi_lmul</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_uldivmod</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_slot_2_lpcycles
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
</UL>

<P><STRONG><a name="[cd]"></a>rand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_data_req_handler_patch
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_packet_ind_handler_patch
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_char_req_handler_patch
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_wrtie
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_llc_desc_register
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gatt_desc_register
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_atts_desc_register
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_restore_backup
</UL>

<P><STRONG><a name="[54]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[cf]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__rd_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, math.o(REG_ACCESS_SECTION))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_id
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_busy
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble_wakeup
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_allowed
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
</UL>

<P><STRONG><a name="[58]"></a>__wr_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, math.o(REG_ACCESS_SECTION))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_ClrIntFlag
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash_patch
</UL>

<P><STRONG><a name="[57]"></a>__wr_reg_with_msk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, math.o(REG_ACCESS_SECTION))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_32k_xtal_wakeup_timer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep_restore
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL1WithMask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_busy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_ble_setting
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR0WithMask
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
</UL>

<P><STRONG><a name="[d]"></a>BLE_IRQHandler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lib.o(i.BLE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLE_IRQHandler &rArr; default_exit_sleep_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_exit_sleep_cb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIO_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gpio.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>OSC_EN_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sleep.o(i.OSC_EN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSC_EN_IRQHandler &rArr; syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SystemInit</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, system.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemInit &rArr; syscon_set_sysclk_src &rArr; syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER0_IRQHandler &rArr; timer_timer_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER1_IRQHandler &rArr; timer_timer_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER2_IRQHandler &rArr; timer_timer_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER3_IRQHandler &rArr; timer_timer_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART0_RX_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uart.o(i.UART0_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_RX_IRQHandler &rArr; uart_uart_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_ClrIntFlag
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART0_TX_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart.o(i.UART0_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_TX_IRQHandler &rArr; uart_uart_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UartPutc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart.o(i.UartPutc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartPutc &rArr; uart_uart_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[6d]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d2]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[7e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_random_add_req_cmp_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_mode_req_cmp_evt_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_devname_req_cmp_evt_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req_cmp_evt_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_change_param_req_cmp_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>

<P><STRONG><a name="[af]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_get
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>

<P><STRONG><a name="[6f]"></a>__nvds_get</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lib.o(i.__nvds_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[d3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[47]"></a>app_beacon_chg_ctx_timer_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usr_design.o(i.app_beacon_chg_ctx_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_beacon_chg_ctx_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>app_button_timer_handler</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, usr_design.o(i.app_button_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_button_timer_handler &rArr; app_gap_adv_start_req
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_stop_req
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>app_event_button1_press_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usr_design.o(i.app_event_button1_press_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_event_button1_press_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_start_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_design.o(i.usr_init)
</UL>
<P><STRONG><a name="[43]"></a>app_event_button2_press_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usr_design.o(i.app_event_button2_press_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_event_button2_press_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_start_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_design.o(i.usr_init)
</UL>
<P><STRONG><a name="[7a]"></a>app_gap_adv_start_req</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, app_gap.o(i.app_gap_adv_start_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gap_adv_start_req
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_ble_dev_mode_flag
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_timer_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_beacon_chg_ctx_process
</UL>

<P><STRONG><a name="[7b]"></a>app_gap_adv_stop_req</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_gap.o(i.app_gap_adv_stop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gap_adv_stop_req
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_timer_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_beacon_chg_ctx_process
</UL>

<P><STRONG><a name="[4f]"></a>app_gap_change_param_req_cmp_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_change_param_req_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gap_change_param_req_cmp_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>app_gap_read_bdaddr_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gap.o(i.app_gap_read_bdaddr_req))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_ver_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[4c]"></a>app_gap_read_bdaddr_req_cmp_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_read_bdaddr_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gap_read_bdaddr_req_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_bondable_mode_req
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>app_gap_read_ver_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gap.o(i.app_gap_read_ver_req))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_sec_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[4b]"></a>app_gap_read_ver_req_cmp_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_read_ver_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gap_read_ver_req_cmp_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>app_gap_ready_evt_handler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_ready_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gap_ready_evt_handler &rArr; app_gap_set_sec_req
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_sec_req
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>app_gap_reset_req_cmp_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_gap_task.o(i.app_gap_reset_req_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gap_reset_req_cmp_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>app_gap_set_bondable_mode_req</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_gap.o(i.app_gap_set_bondable_mode_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gap_set_bondable_mode_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[4e]"></a>app_gap_set_devname_req_cmp_evt_handler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_set_devname_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gap_set_devname_req_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>app_gap_set_mode_req_cmp_evt_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_gap_task.o(i.app_gap_set_mode_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gap_set_mode_req_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>app_gap_set_random_add_req_cmp_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_gap_task.o(i.app_gap_set_random_add_req_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gap_set_random_add_req_cmp_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>app_gap_set_sec_req</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_gap.o(i.app_gap_set_sec_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gap_set_sec_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_ready_evt_handler
</UL>

<P><STRONG><a name="[4a]"></a>app_gap_set_sec_req_cmp_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_set_sec_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gap_set_sec_req_cmp_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_ver_req
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>app_gatt_resource_access_req_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gatt_resource_access_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gatt_resource_access_req_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>app_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usr_design.o(i.app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_init &rArr; task_app_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_app_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>app_led_timer_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usr_design.o(i.app_led_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_led_timer_handler &rArr; led_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_get
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>app_task_msg_hdl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usr_design.o(i.app_task_msg_hdl))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_sec_req_cmp_evt_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_mode_req_cmp_evt_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_devname_req_cmp_evt_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_reset_req_cmp_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_ready_evt_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_ver_req_cmp_evt_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req_cmp_evt_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_change_param_req_cmp_handler
</UL>

<P><STRONG><a name="[78]"></a>assert_err</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_main.o(i.assert_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = assert_err &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_timer_handler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_init
</UL>

<P><STRONG><a name="[c5]"></a>ble_evt_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(i.ble_evt_empty))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
</UL>

<P><STRONG><a name="[88]"></a>ble_ext_wakeup_allow</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lib.o(i.ble_ext_wakeup_allow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ext_wakeup_allow &rArr; ble_hw_sleep &rArr; syscon_GetBLESR
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_sleep
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_button2_cb
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_button1_cb
</UL>

<P><STRONG><a name="[89]"></a>ble_hw_sleep</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib.o(i.ble_hw_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hw_sleep &rArr; syscon_GetBLESR
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ext_wakeup_allow
</UL>

<P><STRONG><a name="[8b]"></a>ble_init</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, lib.o(i.ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_init &rArr; task_gatt_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_work_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_llc_desc_register
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gatt_desc_register
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_atts_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>ble_sleep</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lib.o(i.ble_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_sleep &rArr; syscon_GetBLESR
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>button_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, button.o(i.button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = button_init &rArr; gpio_wakeup_config
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_enable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[96]"></a>check_ble_wakeup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i.check_ble_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_ble_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[90]"></a>config_work_mode</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lib.o(i.config_work_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = config_work_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[97]"></a>dc_dc_enable</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lib.o(i.dc_dc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dc_dc_enable &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>enter_sleep</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, sleep.o(i.enter_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enter_sleep &rArr; sleep_post_process &rArr; dp_dp_SetRegWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dbg_info
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble_wakeup
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR0WithMask
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>fputc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; UartPutc &rArr; uart_uart_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[93]"></a>gpio_enable_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.gpio_enable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[61]"></a>gpio_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[27]"></a>gpio_interrupt_callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usr_design.o(i.gpio_interrupt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_interrupt_callback &rArr; usr_button2_cb &rArr; wakeup_32k_xtal_switch_clk &rArr; syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_button2_cb
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_button1_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(i.SystemInit)
</UL>
<P><STRONG><a name="[79]"></a>gpio_read_pin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(i.gpio_read_pin))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_get
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_timer_handler
</UL>

<P><STRONG><a name="[a6]"></a>gpio_read_pin_field</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.gpio_read_pin_field))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_allowed
</UL>

<P><STRONG><a name="[a7]"></a>gpio_set_direction</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.gpio_set_direction))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
</UL>

<P><STRONG><a name="[b0]"></a>gpio_set_direction_field</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.gpio_set_direction_field))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[a5]"></a>gpio_sleep_allowed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gpio.o(i.gpio_sleep_allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_sleep_allowed
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin_field
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
</UL>

<P><STRONG><a name="[92]"></a>gpio_wakeup_config</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gpio.o(i.gpio_wakeup_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_wakeup_config
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[a8]"></a>gpio_write_pin</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.gpio_write_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>

<P><STRONG><a name="[aa]"></a>is_flash_present</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, serialflash.o(i.is_flash_present))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_id
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
</UL>

<P><STRONG><a name="[ac]"></a>ke_schedule</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lib.o(i.ke_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ke_schedule &rArr; ke_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_time
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>ke_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.ke_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ke_time
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_schedule
</UL>

<P><STRONG><a name="[c4]"></a>ke_timer_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i.ke_timer_empty))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
</UL>

<P><STRONG><a name="[86]"></a>led_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led.o(i.led_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_timer_handler
</UL>

<P><STRONG><a name="[62]"></a>led_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_init &rArr; led_set &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction_field
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[87]"></a>led_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(i.led_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_set &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_timer_handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>main</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, app_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = main &rArr; plf_init &rArr; nvds_restore_backup &rArr; nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_schedule
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b2]"></a>plf_init</STRONG> (Thumb, 692 bytes, Stack size 56 bytes, lib.o(i.plf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = plf_init &rArr; nvds_restore_backup &rArr; nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_restore_backup
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>power_off_flash</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, serialflash.o(i.power_off_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = power_off_flash &rArr; is_flash_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
</UL>

<P><STRONG><a name="[71]"></a>power_on_flash</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, serialflash.o(i.power_on_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_present
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
</UL>

<P><STRONG><a name="[2f]"></a>prf_dispatch_disconnect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usr_design.o(i.prf_dispatch_disconnect))
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(i.main)
</UL>
<P><STRONG><a name="[2e]"></a>prf_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usr_design.o(i.prf_init))
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(i.main)
</UL>
<P><STRONG><a name="[ab]"></a>read_flash_id</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, serialflash.o(i.read_flash_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_present
</UL>

<P><STRONG><a name="[be]"></a>restore_ble_setting</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lib.o(i.restore_ble_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = restore_ble_setting &rArr; dp_dp_SetRegWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_cb
</UL>

<P><STRONG><a name="[9f]"></a>set_dbg_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i.set_dbg_info))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_reset_cb
</UL>

<P><STRONG><a name="[30]"></a>sleep_cb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sleep.o(i.sleep_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sleep_cb &rArr; usr_sleep_restore &rArr; uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep_restore
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_ble_setting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(i.main)
</UL>
<P><STRONG><a name="[b4]"></a>sleep_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sleep.o(i.sleep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sleep_init &rArr; syscon_SetPGCR0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>sleep_post_process</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lib.o(i.sleep_post_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sleep_post_process &rArr; dp_dp_SetRegWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[7d]"></a>store_ble_dev_mode_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i.store_ble_dev_mode_flag))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
</UL>

<P><STRONG><a name="[5c]"></a>syscon_set_ahb_clk</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, syscon.o(i.syscon_set_ahb_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = syscon_set_ahb_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5e]"></a>syscon_set_apb_clk</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, syscon.o(i.syscon_set_apb_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = syscon_set_apb_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5d]"></a>syscon_set_ble_clk</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, syscon.o(i.syscon_set_ble_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = syscon_set_ble_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5b]"></a>syscon_set_sysclk_src</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_sysclk_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = syscon_set_sysclk_src &rArr; syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5f]"></a>syscon_set_timer_clk</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, syscon.o(i.syscon_set_timer_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = syscon_set_timer_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[60]"></a>syscon_set_usart_clk</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, syscon.o(i.syscon_set_usart_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = syscon_set_usart_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[85]"></a>task_app_desc_register</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, app_task.o(i.task_app_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task_app_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[c2]"></a>uart_check_tx_free</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart.o(i.uart_check_tx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_check_tx_free &rArr; uart_uart_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
</UL>

<P><STRONG><a name="[64]"></a>uart_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep_restore
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a4]"></a>usr_button1_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usr_design.o(i.usr_button1_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usr_button1_cb &rArr; wakeup_32k_xtal_switch_clk &rArr; syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ext_wakeup_allow
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_callback
</UL>

<P><STRONG><a name="[a3]"></a>usr_button2_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usr_design.o(i.usr_button2_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usr_button2_cb &rArr; wakeup_32k_xtal_switch_clk &rArr; syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ext_wakeup_allow
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_callback
</UL>

<P><STRONG><a name="[b3]"></a>usr_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usr_design.o(i.usr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usr_init &rArr; assert_err &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>usr_sleep</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sleep.o(i.usr_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usr_sleep &rArr; uart_check_tx_free &rArr; uart_uart_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_empty
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_empty
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_allowed
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_check_tx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>usr_sleep_restore</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usr_design.o(i.usr_sleep_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usr_sleep_restore &rArr; uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_cb
</UL>

<P><STRONG><a name="[7c]"></a>wakeup_32k_xtal_start_timer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sleep.o(i.wakeup_32k_xtal_start_timer))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_button2_press_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_button1_press_handler
</UL>

<P><STRONG><a name="[c3]"></a>wakeup_32k_xtal_switch_clk</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sleep.o(i.wakeup_32k_xtal_switch_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wakeup_32k_xtal_switch_clk &rArr; syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_button2_cb
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_button1_cb
</UL>

<P><STRONG><a name="[b5]"></a>wakeup_by_sleep_timer</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sleep.o(i.wakeup_by_sleep_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wakeup_by_sleep_timer &rArr; syscon_SetPGCR2WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR0WithMask
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[44]"></a>usr_beacon_chg_ctx_process</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, usr_design.o(i.usr_beacon_chg_ctx_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usr_beacon_chg_ctx_process &rArr; app_gap_adv_start_req
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_stop_req
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_design.o(i.usr_init)
</UL>
<P><STRONG><a name="[45]"></a>app_32k_xtal_wakeup_timer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_task.o(i.app_32k_xtal_wakeup_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_32k_xtal_wakeup_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>uart_rx_int_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart.o(i.uart_rx_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_rx_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>uart_tx_int_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart.o(i.uart_tx_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_tx_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>uart_uart_ClrIntFlag</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.uart_uart_ClrIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_ClrIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>uart_uart_GetIntFlag</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.uart_uart_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_check_tx_free
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>uart_uart_SetTXD</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uart.o(i.uart_uart_SetTXD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>syscon_GetBLESR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sleep.o(i.syscon_GetBLESR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_GetBLESR
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[59]"></a>syscon_SetCMDCRWithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetCMDCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_EN_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>syscon_SetIvrefX32WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetIvrefX32WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[9c]"></a>syscon_SetPGCR0WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetPGCR0WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[9d]"></a>syscon_SetPGCR2WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetPGCR2WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR2WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[c0]"></a>syscon_SetCMDCRWithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, syscon.o(i.syscon_SetCMDCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
</UL>

<P><STRONG><a name="[66]"></a>timer_timer_ClrIntFlag</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.timer_timer_ClrIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timer_ClrIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>timer_timer_GetIntFlag</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.timer_timer_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timer_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>is_flash_busy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, serialflash.o(i.is_flash_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_flash_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
</UL>

<P><STRONG><a name="[73]"></a>__nvds_wrtie</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, lib.o(i.__nvds_wrtie))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __nvds_wrtie
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write
</UL>

<P><STRONG><a name="[a2]"></a>atts_patch_env_clear</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lib.o(i.atts_patch_env_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atts_patch_env_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init_patch
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_discon_ind_handler_patch
</UL>

<P><STRONG><a name="[3e]"></a>atts_req_error_ind_handler_patch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lib.o(i.atts_req_error_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atts_req_error_ind_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_gatt_desc_register)
</UL>
<P><STRONG><a name="[94]"></a>cal_cal_SetCAL0WithMask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lib.o(i.cal_cal_SetCAL0WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_cal_SetCAL0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[95]"></a>cal_cal_SetCAL1WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lib.o(i.cal_cal_SetCAL1WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_cal_SetCAL1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[ae]"></a>co_buf_rx_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib.o(i.co_buf_rx_get))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_lld_data_ind_handler_patch
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_data_packet_ind_handler_patch
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_packet_ind_handler_patch
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_l2cc_data_packet_ind_handler_patch
</UL>

<P><STRONG><a name="[38]"></a>default_enter_sleep_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lib.o(i.default_enter_sleep_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = default_enter_sleep_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[39]"></a>default_exit_sleep_cb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i.default_exit_sleep_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = default_exit_sleep_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[bd]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[9a]"></a>dp_dp_SetRegWithMask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.dp_dp_SetRegWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dp_dp_SetRegWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_ble_setting
</UL>

<P><STRONG><a name="[34]"></a>force_agc_enable_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i.force_agc_enable_null))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[2c]"></a>gap_discon_ind_handler_patch</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lib.o(i.gap_discon_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_discon_ind_handler_patch &rArr; atts_patch_env_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_patch_env_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[3c]"></a>gatt_read_char_req_handler_patch</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, lib.o(i.gatt_read_char_req_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_read_char_req_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_gatt_desc_register)
</UL>
<P><STRONG><a name="[3d]"></a>gatt_write_char_req_handler_patch</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, lib.o(i.gatt_write_char_req_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_write_char_req_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_gatt_desc_register)
</UL>
<P><STRONG><a name="[70]"></a>is_flash_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i.is_flash_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_flash_off
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
</UL>

<P><STRONG><a name="[3b]"></a>l2cc_data_packet_ind_handler_patch</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lib.o(i.l2cc_data_packet_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cc_data_packet_ind_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_buf_rx_get
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_atts_desc_register)
</UL>
<P><STRONG><a name="[3f]"></a>l2cc_data_send_rsp_handler_patch</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lib.o(i.l2cc_data_send_rsp_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cc_data_send_rsp_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_gatt_desc_register)
</UL>
<P><STRONG><a name="[2d]"></a>llc_data_packet_ind_handler_patch</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, lib.o(i.llc_data_packet_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llc_data_packet_ind_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_buf_rx_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[40]"></a>llc_data_req_handler_patch</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, lib.o(i.llc_data_req_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llc_data_req_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_llc_desc_register)
</UL>
<P><STRONG><a name="[41]"></a>llc_lld_stop_ind_handler_patch</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lib.o(i.llc_lld_stop_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llc_lld_stop_ind_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_llc_desc_register)
</UL>
<P><STRONG><a name="[37]"></a>lld_sleep_init_patch</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lib.o(i.lld_sleep_init_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lld_sleep_init_patch &rArr; atts_patch_env_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_patch_env_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[35]"></a>lld_sleep_lpcycles_2_us</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lib.o(i.lld_sleep_lpcycles_2_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_sleep_lpcycles_2_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[29]"></a>llm_lld_data_ind_handler_patch</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lib.o(i.llm_lld_data_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llm_lld_data_ind_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_buf_rx_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[b7]"></a>nvds_copy</STRONG> (Thumb, 58 bytes, Stack size 280 bytes, lib.o(i.nvds_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_restore_backup
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_erase
</UL>

<P><STRONG><a name="[32]"></a>nvds_erase</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lib.o(i.nvds_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nvds_erase &rArr; nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_copy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[33]"></a>nvds_read</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lib.o(i.nvds_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvds_read &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[b9]"></a>nvds_restore_backup</STRONG> (Thumb, 98 bytes, Stack size 272 bytes, lib.o(i.nvds_restore_backup))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = nvds_restore_backup &rArr; nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_copy
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[31]"></a>nvds_write</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lib.o(i.nvds_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nvds_write &rArr; __nvds_wrtie
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_wrtie
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[3a]"></a>plf_reset_cb</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lib.o(i.plf_reset_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = plf_reset_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dbg_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[bb]"></a>powerup_calibration</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, lib.o(i.powerup_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = powerup_calibration &rArr; dp_dp_SetRegWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL1WithMask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[36]"></a>rwble_slot_2_lpcycles</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lib.o(i.rwble_slot_2_lpcycles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwble_slot_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[b8]"></a>sector_erase_flash_patch</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lib.o(i.sector_erase_flash_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_erase
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_copy
</UL>

<P><STRONG><a name="[2b]"></a>smp_rtx_ind_handler_patch</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lib.o(i.smp_rtx_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smp_rtx_ind_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[2a]"></a>smpc_l2cc_data_packet_ind_handler_patch</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, lib.o(i.smpc_l2cc_data_packet_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smpc_l2cc_data_packet_ind_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_buf_rx_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[8a]"></a>syscon_GetBLESR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lib.o(i.syscon_GetBLESR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_GetBLESR
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ext_wakeup_allow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_sleep
</UL>

<P><STRONG><a name="[98]"></a>syscon_SetIvrefX32WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lib.o(i.syscon_SetIvrefX32WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
</UL>

<P><STRONG><a name="[99]"></a>syscon_SetPGCR1WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lib.o(i.syscon_SetPGCR1WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
</UL>

<P><STRONG><a name="[8e]"></a>task_atts_desc_register</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lib.o(i.task_atts_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task_atts_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[8f]"></a>task_gatt_desc_register</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lib.o(i.task_gatt_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task_gatt_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[8d]"></a>task_llc_desc_register</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lib.o(i.task_llc_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_llc_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[6e]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[76]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[75]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
